name: 🚀 Auto Validation & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'DungeonGame.csproj'

jobs:
  # ==========================================
  # CODE QUALITY & VALIDATION
  # ==========================================
  validate:
    name: 🔍 Code Validation
    runs-on: windows-latest
    outputs:
      validation-passed: ${{ steps.validation-result.outputs.passed }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏗️ Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 🔄 Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: 🏗️ Build Solution
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore --verbosity minimal
        echo "BUILD_SUCCESS=true" >> $GITHUB_ENV

    - name: 🧪 Run Unit Tests
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity minimal --collect:"XPlat Code Coverage"
        echo "TESTS_SUCCESS=true" >> $GITHUB_ENV

    - name: 📊 Code Coverage Report
      uses: codecov/codecov-action@v3
      with:
        file: '**/coverage.cobertura.xml'
        flags: unittests
        name: dungeon-game-coverage

    - name: 🔎 Code Analysis
      run: |
        dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic
        echo "CODE_FORMAT_SUCCESS=true" >> $GITHUB_ENV

    - name: 🛡️ Security Scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

    - name: 🤖 AI Performance Benchmark
      run: |
        # Run AI performance tests
        dotnet run --project ${{ env.SOLUTION_PATH }} --configuration Release -- --benchmark --headless
        echo "AI_BENCHMARK_SUCCESS=true" >> $GITHUB_ENV
      continue-on-error: true

    - name: ✅ Validation Summary
      id: validation-result
      run: |
        if [[ "$BUILD_SUCCESS" == "true" && "$TESTS_SUCCESS" == "true" && "$CODE_FORMAT_SUCCESS" == "true" ]]; then
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "🎉 All validations passed!"
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "❌ Some validations failed"
          exit 1
        fi

  # ==========================================
  # CONTRIBUTOR VALIDATION
  # ==========================================
  contributor-check:
    name: 👤 Contributor Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      contributor-valid: ${{ steps.contributor-validation.outputs.valid }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Validate Contributor Guidelines
      id: contributor-validation
      run: |
        PR_BODY="${{ github.event.pull_request.body }}"
        
        # Check if PR follows template
        if echo "$PR_BODY" | grep -q "## Description"; then
          echo "✅ PR follows template"
          TEMPLATE_CHECK=true
        else
          echo "❌ PR doesn't follow template"
          TEMPLATE_CHECK=false
        fi
        
        # Check if PR has proper labels
        LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
        if [[ -n "$LABELS" ]]; then
          echo "✅ PR has labels: $LABELS"
          LABELS_CHECK=true
        else
          echo "❌ PR missing labels"
          LABELS_CHECK=false
        fi
        
        # Check branch naming convention
        BRANCH_NAME="${{ github.head_ref }}"
        if echo "$BRANCH_NAME" | grep -E '^(feature|fix|docs|ai|ui)\/'; then
          echo "✅ Branch follows naming convention: $BRANCH_NAME"
          BRANCH_CHECK=true
        else
          echo "❌ Branch doesn't follow naming convention: $BRANCH_NAME"
          BRANCH_CHECK=false
        fi
        
        # Overall validation
        if [[ "$TEMPLATE_CHECK" == "true" && "$LABELS_CHECK" == "true" && "$BRANCH_CHECK" == "true" ]]; then
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "🎉 Contributor guidelines followed!"
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "❌ Please follow contributor guidelines"
        fi

    - name: 💬 Comment Guidelines
      if: steps.contributor-validation.outputs.valid == 'false'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 📋 Contributor Guidelines Check Failed
            
            Hi @${{ github.event.pull_request.user.login }}! Thank you for your contribution. However, your PR doesn't fully follow our guidelines:
            
            ### 📝 Please ensure:
            - [ ] **PR follows template** - Include Description, Type of Change, Testing sections
            - [ ] **Proper labels** - Add appropriate labels (bug, feature, ai, docs, etc.)
            - [ ] **Branch naming** - Use format: \`feature/description\`, \`fix/issue-number\`, \`ai/algorithm\`, etc.
            
            ### 🔧 Quick fixes:
            1. **Update PR description** using our template
            2. **Add labels** that describe your changes
            3. **Rename branch** if needed (or create new one)
            
            Once fixed, the automated checks will run again. Thanks for contributing to Dungeon Game! 🎮
            
            ---
            *This is an automated check. For questions, see our [Contributing Guidelines](CONTRIBUTING.md)*`
          })

  # ==========================================
  # AUTO MERGE (if all checks pass)
  # ==========================================
  auto-merge:
    name: 🔄 Auto Merge
    runs-on: ubuntu-latest
    needs: [validate, contributor-check]
    if: |
      github.event_name == 'pull_request' && 
      needs.validate.outputs.validation-passed == 'true' && 
      (needs.contributor-check.outputs.contributor-valid == 'true' || github.actor == 'galihru')
      
    steps:
    - name: 🎯 Auto Merge PR
      uses: pascalgn/merge-action@v0.15.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        merge_method: squash
        merge_commit_message: |
          ${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})
          
          ${{ github.event.pull_request.body }}

    - name: 🎉 Success Notification
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🎉 Automatically Merged!
            
            Your contribution has been successfully merged! Thank you @${{ github.event.pull_request.user.login }} for contributing to Dungeon Game.
            
            ### ✅ All checks passed:
            - 🏗️ Build successful
            - 🧪 Tests passed
            - 📊 Code quality approved
            - 🤖 AI benchmarks validated
            - 🛡️ Security scan clean
            
            Your changes are now part of the main codebase and will be included in the next release.
            
            ---
            *Automated merge by Dungeon Game CI/CD 🤖*`
          })

  # ==========================================
  # BUILD & DEPLOY
  # ==========================================
  build-deploy:
    name: 🚢 Build & Deploy
    runs-on: windows-latest
    needs: [validate]
    if: github.ref == 'refs/heads/main' && needs.validate.outputs.validation-passed == 'true'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: 🏗️ Build Release
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: 📦 Publish Application
      run: |
        dotnet publish ${{ env.SOLUTION_PATH }} -c Release -o publish --self-contained true -r win-x64
        Compress-Archive -Path "publish/*" -DestinationPath "DungeonGame-v${{ github.run_number }}.zip"

    - name: 📊 Generate Build Report
      run: |
        echo "## 🎮 Dungeon Game Build Report" >> build-report.md
        echo "**Build Number:** ${{ github.run_number }}" >> build-report.md
        echo "**Commit:** ${{ github.sha }}" >> build-report.md
        echo "**Build Date:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" >> build-report.md
        echo "**Status:** ✅ Success" >> build-report.md

    - name: 🚀 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dungeon-game-release
        path: |
          DungeonGame-v${{ github.run_number }}.zip
          publish/
          build-report.md

    - name: 📋 Create Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: DungeonGame-v${{ github.run_number }}.zip
        generate_release_notes: true
        make_latest: true

  # ==========================================
  # NOTIFICATION & REPORTING
  # ==========================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [validate, build-deploy]
    if: always()
    
    steps:
    - name: 📊 Workflow Summary
      run: |
        echo "## 🎮 Dungeon Game Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Validation:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build & Deploy:** ${{ needs.build-deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.validate.result }}" == "success" ]]; then
          echo "✅ All systems operational" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Issues detected - check logs" >> $GITHUB_STEP_SUMMARY
        fi
