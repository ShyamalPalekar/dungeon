name: 🎮 Build and Release Dungeon Game

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: false
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'
  PROJECT_PATH: './DungeonGame.csproj'
  ARTIFACT_NAME: 'DungeonGame'

jobs:
  build:
    name: 🔨 Build Application
    runs-on: windows-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.check_release.outputs.should_release }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore Dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: 🔍 Determine Version
      id: version
      run: |
        if ("${{ github.event.inputs.version }}" -ne "") {
          $version = "${{ github.event.inputs.version }}"
        } elseif ("${{ github.ref_type }}" -eq "tag") {
          $version = "${{ github.ref_name }}".TrimStart('v')
        } else {
          $shortSha = "${{ github.sha }}".Substring(0, 7)
          $version = "1.0.0-dev.$shortSha"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "🎯 Building version: $version"

    - name: 🔄 Update Version in Project
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $csprojContent = Get-Content ${{ env.PROJECT_PATH }}
        $csprojContent = $csprojContent -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$version.0</AssemblyVersion>"
        $csprojContent = $csprojContent -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$version.0</FileVersion>"
        $csprojContent = $csprojContent -replace '<ProductVersion>.*</ProductVersion>', "<ProductVersion>$version</ProductVersion>"
        $csprojContent | Set-Content ${{ env.PROJECT_PATH }}
        echo "✅ Updated version to $version"

    - name: 🏗️ Build Application
      run: |
        dotnet build ${{ env.PROJECT_PATH }} `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --no-restore `
          --verbosity minimal

    - name: 🧪 Run Tests
      run: |
        if (Test-Path "**/*Test*.csproj") {
          dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity minimal
        } else {
          echo "⚠️ No test projects found, skipping tests"
        }

    - name: 📱 Publish Self-Contained
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish `
          --verbosity minimal

    - name: 🎨 Create Installer Assets
      run: |
        # Copy important files to publish directory
        if (Test-Path "README.md") { Copy-Item "README.md" "./publish/" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "./publish/" }
        
        # Create version info file
        $version = "${{ steps.version.outputs.version }}"
        @{
          version = $version
          buildDate = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
          commitHash = "${{ github.sha }}"
          buildNumber = "${{ github.run_number }}"
        } | ConvertTo-Json | Out-File "./publish/version.json"

    - name: 📦 Create ZIP Archive
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $archiveName = "${{ env.ARTIFACT_NAME }}-$version-win-x64.zip"
        Compress-Archive -Path "./publish/*" -DestinationPath "./$archiveName"
        echo "archive_name=$archiveName" >> $env:GITHUB_OUTPUT
        echo "✅ Created archive: $archiveName"
      id: archive

    - name: 🚀 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}
        path: ./${{ steps.archive.outputs.archive_name }}
        retention-days: 30

    - name: 📋 Check Release Conditions
      id: check_release
      run: |
        $shouldRelease = $false
        if ("${{ github.event.inputs.create_release }}" -eq "true") {
          $shouldRelease = $true
          echo "🎯 Manual release requested"
        } elseif ("${{ github.ref_type }}" -eq "tag") {
          $shouldRelease = $true
          echo "🏷️ Tag push detected"
        } elseif ("${{ github.ref }}" -eq "refs/heads/main" -and "${{ github.event_name }}" -eq "push") {
          $shouldRelease = $true
          echo "📦 Main branch push - creating pre-release"
        }
        echo "should_release=$shouldRelease" >> $env:GITHUB_OUTPUT

  release:
    name: 🚀 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_release == 'true'
    
    permissions:
      contents: write
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ needs.build.outputs.version }}
        path: ./artifacts

    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        version="${{ needs.build.outputs.version }}"
        
        # Create comprehensive release notes
        cat > release_notes.md << EOF
        # 🎮 Dungeon Game v$version
        
        ## 🆕 What's New
        - Enhanced AI gameplay with Q-Learning algorithms
        - Multiple difficulty levels (Beginner → Master)
        - Turn-based strategic combat system
        - Modern WPF interface with dark theme
        - Auto-update system with GitHub integration
        
        ## 🎯 Features
        - **Smart AI Opponent**: Uses Q-Learning for adaptive gameplay
        - **Difficulty Scaling**: From beginner-friendly to master level challenge
        - **Visual Polish**: Modern dark theme with smooth animations
        - **Auto-Updates**: Automatic notification and installation of new versions
        - **Game Rules**: Built-in tutorial and help system
        
        ## 📦 Installation
        1. Download the ZIP file below
        2. Extract to your preferred location
        3. Run DungeonGame.exe
        4. Enjoy strategic dungeon battles!
        
        ## 🔧 System Requirements
        - Windows 10/11 (x64)
        - .NET 9 Runtime (included)
        - 50MB free disk space
        
        ## 👨‍💻 Developer
        **GALIH RIDHO UTOMO**
        - Repository: https://github.com/galihru/dungeon
        - Built with: .NET 9, WPF, Q-Learning AI
        
        ---
        *Built on $(date +'%B %d, %Y') | Commit: ${{ github.sha }}*
        EOF
        
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🏷️ Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: 🎮 Dungeon Game v${{ needs.build.outputs.version }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        files: ./artifacts/*
        draft: false
        prerelease: ${{ contains(needs.build.outputs.version, '-') }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🎉 Release Summary
      run: |
        echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** v${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Type:** ${{ contains(needs.build.outputs.version, '-') && 'Pre-release' || 'Stable Release' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Assets:** Windows x64 ZIP package" >> $GITHUB_STEP_SUMMARY
        echo "**Auto-Update:** Enabled for existing installations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build.outputs.version }})" >> $GITHUB_STEP_SUMMARY
